#+TITLE: Sherman Pay's Emacs Configuration
#+AUTHOR: Jing Hao Sherman Pay
#+EMAIL: shermanpay1991@gmail.com
#+PROPERTY: header-args :emacs-lisp    :tangle yes
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Overview
I am currently in the process of cleaning up my Emacs config. I started using
Emacs before [[https://github.com/jwiegley/use-package][use-package]] was really a thing, so I had many packages installed
and had dependencies to the packages all over the place. This made bootstrapping
a new machine with Emacs really difficult. As such the goal of my current config
is to be as simple as possible and have the flexilibility to enable packages and
configurations for specific use cases.

* Configuration

** Require Common Lisp library
Require builtin libraries here.

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC

** Environment

*** My variables
My user defined variables. I prefix all my variables with "my" to ensure there
are no name collisions with other other modes variables.
#+BEGIN_SRC emacs-lisp
(defvar my-org-dir (concat user-emacs-directory "org"))
#+END_SRC 

*** Load Paths
Add "~/.emacs.d" to load-path
#+BEGIN_SRC emacs-lisp
(let ((default-directory user-emacs-directory))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

*** User Info
Explicitly set these.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jing Hao Sherman Pay"
      user-mail-address "shermanpay1991@gmail.com")
#+END_SRC

** Startup
Right now I open a basic "todo.org" file at startup. Consider creating a
personalized org file for startup.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda () (find-file (concat my-org-dir "/todo.org"))))
(setq inhibit-startup-message t)
#+END_SRC

** Basic stuff

*** Yes/No prompts
Change yes or no prompts to y or n prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Uniquify
Uniquify buffer names with "post-forward" style:
   /foo/bar/name will become name|/foo/bar
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "M-o") 'other-window)
#+END_SRC
** Editing text
subword-mode: Allows navigation and editing of "subwords"

show-paren-mode: Show matching parentheses

next-line-add-newlines: If non-nil 'next-line' inserts a newline

save-place-mode: Save previous editing location and always go back to it
#+BEGIN_SRC emacs-lisp
(global-subword-mode t)

(show-paren-mode 1)
(setq show-paren-style 'expression)

(setq next-line-add-newlines nil)

(save-place-mode 1)
#+END_SRC

*** Ansi Color codes
Enable Ansi color codes for compilation buffers
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
#+END_SRC

*** Debugging Emacs
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

*** Backups
Setting Auto-Save directory and Backup Directory
#+BEGIN_SRC emacs-lisp
(let ((tmp (concat user-emacs-directory "tmp")))
 (setq backup-directory-alist
       `((".*" . ,tmp)))
 (setq auto-save-file-name-transforms
       `((".*" ,tmp t))))
#+END_SRC

** User Interface

*** Line and Column numbers
Show line-numbers and column numbers in the mode-line but don't show
line numbers on the sidej
#+BEGIN_SRC emacs-lisp
  (global-linum-mode -1)
  (column-number-mode t)
#+END_SRC
*** Bars
Don't like all the fancy bars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1) 			
(menu-bar-no-scroll-bar)
(tool-bar-mode -1)
#+END_SRC

*** Echo Area
Uses echo area to display tooltips and echo keystrokes
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq echo-keystrokes 0.01)
#+END_SRC

** Emacs Server

Start emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

** Package Management
Package management is important!
Add melpa-stable repository, which has stable community packages.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
      '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

#+END_SRC

*** use-package
Bootstrap and customize it.  always-ensure: Ensure the package exists
by downloading it if it does not exist. However this does *not* keep
packages up to date.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

*** evil-mode
I use evil-mode for Vim emulation

evil-move-cursor-back: don't want to move cursor back after exiting insert 
Add more distinguishable colors for evil states
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config (evil-mode 1)
    (setq evil-move-cursor-back nil)
    (setq evil-normal-state-cursor '("dim gray" box)
	  evil-insert-state-cursor '("dim gray" bar)
	  evil-emacs-state-cursor '("blue" bar)))
#+END_SRC

** Flyspell

Enable flyspell mode for strings and comments
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))
#+END_SRC

** Browser settings

Use chrome as the default browser. This assumes chrome is installed.
#+BEGIN_SRC emacs-lisp
(setq browse-url-generic-program "/usr/bin/google-chrome"
      browse-url-browser-function 'browse-url-generic)
#+END_SRC
** Packages/Plugins
The packages here are not /required/, but they each have their use case or
provide a whole new experience.

*** exec-path-from-shell
To ensure that the Linux/OSX environment variables within emacs is the same as
the shell. (Windows is not included)
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC
*** Helm
Amazing package that provides a whole new UX
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config (helm-mode 1)
    (setq helm-M-x-fuzzy-match t
	  helm-split-window-inside-p t)
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files))
#+END_SRC

*** Projectile
Package for working with "projects"
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config (projectile-global-mode 1)
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+END_SRC

*** Undo tree mode
This makes undo/redo in emacs behave like a tree!
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config (global-undo-tree-mode 1))
#+END_SRC

*** Company mode
[[https://company-mode.github.io/][company-mode]] is an autocomplete framework for Emacs. And it can work with
various backends.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (global-company-mode))
#+END_SRC
*** Magit mode
[[https://magit.vc/][magit]] is an emacs interface to git
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))

#+END_SRC
*** Protocol Buffers
Protocol Buffers are awesome.
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :mode "\\.proto")
#+END_SRC
** Fancier UI
Having a UI that looks good, makes me more productive.
*** Font
I am experimenting with the [[https://sourcefoundry.org/hack/][Hack]] font at the moment. The following will try to
set the font if it exists. Installation of the font is a manual step at the moment.

#+BEGIN_SRC emacs-lisp
  (set-frame-font (find-font (font-spec :name "Hack" :weight 'normal :slant 'normal)))
#+END_SRC

*** Themes
[[https://github.com/kuanyui/moe-theme.el][moe-theme]]: Many awesome customizable features. [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/dark01.png][dark]], [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/light01.png][light]]
#+BEGIN_SRC emacs-lisp
  (use-package moe-theme)
  (moe-dark)
#+END_SRC

** Python
Configuration specific to python.
*** Plugins
Flycheck for linting and using mypy. This might need more configuration
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pycheckers
    :config (with-eval-after-load 'flycheck
	      (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup)))
#+END_SRC

company-jedi for autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :requires company
    :config
    (setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq jedi:use-shortcuts t)
    (defun config/enable-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'config/enable-company-jedi))
#+END_SRC

#+TITLE: Sherman Pay's Emacs Configuration
#+AUTHOR: Jing Hao Sherman Pay
#+EMAIL: shermanpay1991@gmail.com
#+PROPERTY: header-args :emacs-lisp    :tangle yes
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Overview
  Complete configuration for emacs. For machine specific configuration I defer to =~/.emacs.d/init.local.el= file.

* Configuration

** Require Common Lisp library
Require builtin libraries here.

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC

** Environment

*** My variables
My user defined variables. I prefix all my variables with "my" to ensure there
are no name collisions with other other modes variables.
#+BEGIN_SRC emacs-lisp
  (defun my-gdrive-or-emacs-dir ()
	(if (getenv "MY_DRIVE")
		(file-name-as-directory (getenv "MY_DRIVE"))
	  user-emacs-directory))
#+END_SRC

*** Load Paths
Add subdirectories of "~/.emacs.d" to load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
	(normal-top-level-add-subdirs-to-load-path))
#+END_SRC

*** User Info
Explicitly set these.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jing Hao Sherman Pay"
	  user-mail-address "shermanpay1991@gmail.com")
#+END_SRC

** Bootstrap
   Bootstrapping my Emacs.
   #+begin_src emacs-lisp
	 (defun my-file-decrypt->string (filename)
	   "Decrypt GPG encrypted file FILENAME and return the decrypted string."
	   (let ((decrypted-file (concat "/tmp/" (file-name-base filename))))
		 (if filename
			 (progn
			   (epa-decrypt-file filename decrypted-file)
			   (with-temp-buffer
				 (insert-file-contents-literally decrypted-file)
				 (delete-file decrypted-file)
				 (buffer-substring-no-properties (point-min) (point-max))))
		   (message "WARNING '%s' is not readable" filename))))
   #+end_src
** Startup
Right now I open a basic "todo.org" file at startup. Consider creating a
personalized org file for startup.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook #'org-todo-list)
  (setq inhibit-startup-message t)
#+END_SRC

** Basic stuff

*** Yes/No prompts
Change yes or no prompts to y or n prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Uniquify
Uniquify buffer names with "post-forward" style:
   /foo/bar/name will become name|/foo/bar
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "M-o") 'other-window)
#+END_SRC
** Editing
subword-mode: Allows navigation and editing of "subwords"

show-paren-mode: Show matching parentheses

next-line-add-newlines: If non-nil 'next-line' inserts a newline

save-place-mode: Save previous editing location and always go back to it
#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)

  (show-paren-mode 1)
  (setq show-paren-style 'expression)

  (setq next-line-add-newlines nil)

  (save-place-mode 1)
  (setq save-place-forget-unreadable-files nil) ; make emacs quit work

  (setq-default tab-width 4)
#+END_SRC

*** Ansi Color codes
Enable Ansi color codes for compilation buffers
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
#+END_SRC

*** Debugging Emacs
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

*** Backups
Setting Auto-Save directory and Backup Directory
#+BEGIN_SRC emacs-lisp
(let ((tmp (concat user-emacs-directory "tmp")))
 (setq backup-directory-alist
	   `((".*" . ,tmp)))
 (setq auto-save-file-name-transforms
	   `((".*" ,tmp t))))
#+END_SRC

*** Imenu
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c i") 'imenu)

#+END_SRC
** User Interface

*** Line and Column numbers
Show line-numbers and column numbers in the mode-line but don't show
line numbers on the sidej
#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
  (setq-default fill-column 80)
  (require 'display-line-numbers)
  (add-hook 'prog-mode-hook #'display-line-numbers--turn-on)
#+END_SRC
*** Bars
Don't like all the fancy bars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(menu-bar-no-scroll-bar)
(tool-bar-mode -1)
#+END_SRC

*** Echo Area
Uses echo area to display tooltips and echo keystrokes
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq echo-keystrokes 0.01)
#+END_SRC

*** Fractional Font Size
	#+begin_src emacs-lisp
	  (setq frame-resize-pixelwise t)
	#+end_src
** Buffer/Window Mangement
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)
  (add-hook 'ibuffer-mode-hook '(lambda () (ibuffer-auto-mode 1)))
  (setq split-height-threshold 120)
  (setq help-window-select t)
#+END_SRC
** Dired
   #+begin_src emacs-lisp
	 (setq dired-listing-switches "-alh")
   #+end_src
** Emacs Server

Start emacs server
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "server"
	  (unless (server-running-p) (server-start)))
#+END_SRC

** Emacs Desktops
   For saving "desktops"(sessions)
   #+begin_src emacs-lisp
	 (desktop-save-mode nil)
	 (add-to-list 'desktop-path "~/.emacs.d/desktops")
   #+end_src
** Static checkers
*** Flymake
	flymake is the builtin static checker.
	#+begin_src emacs-lisp
	  (with-eval-after-load "flymake"
				(define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
				(define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error))
	  (setq help-at-pt-timer 0.9)
	  (setq help-at-pt-display-when-idle '(flymake-overlay))
	#+end_src
*** Flyspell

 Enable flyspell mode for strings and comments
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))
 #+END_SRC

** Emacs OS
*** dired
	#+begin_src emacs-lisp
	  (setq dired-dwim-target t)
	#+end_src
*** Browser settings

 Use chrome as the default browser. This assumes chrome is installed.
 #+BEGIN_SRC emacs-lisp
 (setq browse-url-generic-program "/usr/bin/google-chrome"
	   browse-url-browser-function 'browse-url-generic)
 #+END_SRC
** Package Management
Package management is important!
Add melpa-stable repository, which has stable community packages.
Add melpa repository for specific packages.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	'("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
	'("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

#+END_SRC

*** use-package
Bootstrap and customize it.  always-ensure: Ensure the package exists
by downloading it if it does not exist. However this does *not* keep
packages up to date.
#+BEGIN_SRC emacs-lisp
  (if (member emacs-version '("26.1" "26.2")) (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
  (eval-when-compile (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (setq use-package-always-pin "melpa")
  (setq use-package-verbose nil)			; set to t for debugging init
#+END_SRC

*** auto-package-update
Automatically update packages.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
	:disabled
	:config
	(setq auto-package-update-interval 90)
	(setq auto-package-update-delete-old-versions t)
	(setq auto-package-update-hide-results t)
	(setq auto-package-update-prompt-before-update t)
	(auto-package-update-maybe))
#+END_SRC
** Packages
   Core packages that is needed for 99% of use cases.
*** evil-mode
I use evil-mode for Vim emulation

evil-move-cursor-back: don't want to move cursor back after exiting insert
Add more distinguishable colors for evil states
#+BEGIN_SRC emacs-lisp
  (use-package evil
	:init
	(setq evil-want-keybinding nil)		; For evil-collection
	:config
	(evil-mode 1)
	(setq evil-move-cursor-back nil)
	(setq evil-normal-state-cursor '("dim gray" box)
		  evil-insert-state-cursor '("dim gray" bar)
		  evil-emacs-state-cursor '("green" bar))
	(evil-set-undo-system 'undo-tree))
#+END_SRC
*** exec-path-from-shell
To ensure that the Linux/OSX environment variables within emacs is the same as
the shell. (Windows is not included)
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
	:config
	(add-to-list 'exec-path-from-shell-variables "MY_DRIVE")
	(add-to-list 'exec-path-from-shell-variables "INCLUDEDIR")
	(when (memq window-system '(mac ns x))
	  (exec-path-from-shell-initialize)))
#+END_SRC
*** Ivy/Counsel
Much more lightweight and faster then Helm, but with the same core functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
	:diminish (ivy-mode "")
	:config
	(ivy-mode 1)
	(counsel-mode 1)
	(setq projectile-completion-system 'ivy)
	(define-key  global-map (kbd "C-c s") 'swiper-isearch)
	(defun my/find-file-no-ivy ()
	   (interactive)
	   (let ((ivy-state ivy-mode))
		 (ivy-mode -1)
		 (call-interactively 'find-file)
		 (ivy-mode ivy-state))))

#+END_SRC

*** Projectile
Package for working with "projects"
#+BEGIN_SRC emacs-lisp
  (use-package projectile
	:diminish (projectile-mode . "")
	:config (projectile-global-mode 1)
	:bind-keymap
	("C-c p" . projectile-command-map))
#+END_SRC

*** Undo tree mode
This makes undo/redo in emacs behave like a tree!
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	:diminish (undo-tree-mode . "")
	:config (global-undo-tree-mode 1)
	(setq my/undo-tree-history-dir (concat user-emacs-directory "undo-tree-history"))
	(make-directory my/undo-tree-history-dir t)
	(setq undo-tree-history-directory-alist `(("." . ,my/undo-tree-history-dir))))
#+END_SRC

*** Magit mode
[[https://magit.vc/][magit]] is an emacs interface to git
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:pin melpa)
#+END_SRC
*** Navigation
	#+begin_src emacs-lisp
	  (use-package avy
		:config
		(avy-setup-default))
	#+end_src
	#+begin_src emacs-lisp
	  (use-package ace-window
		:config
		(global-set-key (kbd "M-o") 'ace-window)
		(setq aw-scope 'frame))
	#+end_src
** Optional Packages
   The packages here are not /required/, but they each have their use case or
   provide a whole new experience.
*** Company mode
	[[https://company-mode.github.io/][company-mode]] is an autocomplete framework for Emacs. And it can work with
	various backends.
	#+BEGIN_SRC emacs-lisp
	  (use-package company
		:diminish (company-mode . "")
		:config
		(global-company-mode)
		(setq company-tooltip-limit 20)                       ; bigger popup window
		(setq company-idle-delay .3)                          ; decrease delay before autocompletion popup shows
		(setq company-echo-delay 0)                           ; remove annoying blinking
		;; start autocompletion only after typing
		(setq company-begin-commands '(self-insert-command)))
	#+END_SRC
*** Protocol Buffers
Protocol Buffers are awesome.
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
	:mode "\\.proto")
#+END_SRC
*** Bazel/Blaze
#+BEGIN_SRC emacs-lisp
  (use-package bazel
	:disabled
	:pin melpa
	:mode "BUILD")
#+END_SRC
*** imenu list
	#+BEGIN_SRC emacs-lisp
	  (use-package imenu-list
		:bind  ("C-c l"  . #'imenu-list-smart-toggle))
	#+END_SRC

*** LSP
	Disabling eglot as at work, there is a builtin version, which is probably more compatible.
	#+begin_src emacs-lisp
	  (use-package eglot
                :disabled
		:pin melpa-stable
		:config (add-to-list 'eglot-stay-out-of 'imenu))

	#+end_src
** Experimental Packages
   The packages here are /experimental/, and should be reviewed if unused.
   #+begin_src emacs-lisp
	 (use-package md4rd
	   :defer
	   :config
	   (setq md4rd--oauth-access-token (my-file-decrypt->string (concat user-emacs-directory "md4rd-oauth-access-token.gpg"))
			 md4rd--oauth-refresh-token (my-file-decrypt->string (concat user-emacs-directory "md4rd-oauth-refresh-token.gpg"))))
   #+end_src
** Fancier UI
Having a UI that looks good, makes me more productive.

*** Themes
[[https://github.com/kuanyui/moe-theme.el][moe-theme]]: Many awesome customizable features. [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/dark01.png][dark]], [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/light01.png][light]]
#+BEGIN_SRC emacs-lisp
	(use-package moe-theme
		:pin melpa
		:config (moe-dark))
#+END_SRC

*** Fonts
	Fonts are handled by the local config as it's easier to manually set them up.

** Org Mode
The following are builtin configurations. The keybindings are as recommended by [[info:org#Activation][info:org#Activation]].
#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC
*** Variables
	#+begin_src emacs-lisp
	  (require 'org)
	  (setq org-directory (concat (my-gdrive-or-emacs-dir) "org/"))
	  (defconst my/org-agenda-directory (concat org-directory "agenda/"))
	  (defconst my/org-notes-directory (concat org-directory "notes/"))
	  (defconst my/org-projects-directory (concat org-directory "projects/"))
	  (setq org-agenda-files (list my/org-agenda-directory my/org-projects-directory))
	  (setq org-default-notes-file (concat org-directory "notes.org"))
	  (defconst my/org-todo-file (concat my/org-agenda-directory "todo.org"))
	  (setq org-todo-keywords '((sequence "TODO(t)" "WORKING(w)" "BLOCKED(b)" "IN_REVIEW(r)" "VERIFY(v)"
										  "|" "DONE(d)" "OBSOLETE(o)" "BACKLOGGED(B)" )))
	  (setq org-enforce-todo-dependencies t)
	  (setq org-refile-targets
			'((nil :maxlevel . 3)
			  (org-agenda-files :maxlevel . 3)))
	  (setq org-id-method 'ts)			   ; use timestamp
	  ;; Create an ID if needed to make a link.
	  (setq org-id-link-to-org-use-id t)
	#+end_src
*** Minor Modes
	Configure minor modes to enable/disable for org-mode
	#+begin_src emacs-lisp
	  (defun my-org-mode-config-minor-modes ()
		;; disable
		(eval-after-load "flycheck" (flycheck-mode -1))
		;; enable
		(visual-line-mode))
	  (add-hook 'org-mode-hook #'my-org-mode-config-minor-modes)
	#+end_src
*** Plugins/Modules
The following are org-mode plugins.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "org"
	(nconc org-modules
		   '(
			 org-tempo
			 org-capture
			 org-protocol
			 ;; org-habit
			 ;; org-id
			 ;; org-brain
			 ))
	(org-load-modules-maybe t))
  (use-package org-bullets
	:hook (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org-babel
	#+begin_src emacs-lisp
	  (org-babel-do-load-languages
	   'org-babel-load-languages
	   '((emacs-lisp t)
		 (dot . t)))
	#+end_src
*** Clocking
	#+begin_src emacs-lisp
	  (setq org-clock-persist 'history)
	  (org-clock-persistence-insinuate)
	#+end_src
*** Notifications
	#+begin_src emacs-lisp
	  (appt-activate)				; Builtin appt package for notifications
	  (setq appt-message-warning-time 6)
	  (setq appt-display-duration 30)

	  ;; The following runs periodically in the foreground
	  (use-package org-notifications
		:disabled
		:pin melpa
		:config
		(org-notifications-start))
	#+end_src

*** Capture
	#+BEGIN_SRC emacs-lisp
	  (with-eval-after-load "org-capture"
		  (setq org-capture-templates
				(nconc '(("p" "Protocol" entry (file+headline org-default-notes-file "Inbox")
						  "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
						 ("L" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
						  "* %? [[%:link][%:description]] \nCaptured On: %U")
						 ("t" "Backlog (default)" entry (file+headline my/org-todo-file "Backlog") "* TODO %U %a\n%i\n%?")
						 ("T" "Backlog" entry (file+headline my/org-todo-file "Backlog") "* TODO %U %^{title|chat AI|mail AI}\n%i\n%?")
						 ("b" "bug" entry (file+headline my/org-todo-file "Backlog")
						  "* TODO %(org-buganizer-create-todo-string-from-bug)"
						  :clock-in t :clock-resume t))
					   org-capture-templates)))
	#+END_SRC
*** org-protocol
	#+begin_src javascript
	  javascript:location.href='org-protocol://capture?template=t&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
	  javascript:location.href='org-protocol://capture?template=T&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
	#+end_src

***** org-roam
	  #+begin_src emacs-lisp
		(use-package org-roam
		  :ensure t
		  :after org
		  :hook
		  (after-init . org-roam-mode)
		  :custom
		  (org-roam-directory org-directory)
		  (org-roam-completion-everywhere t)
		  :config
		  (require 'org-roam-protocol)
		  (org-roam-db-autosync-mode)
		  (setq org-roam-capture-templates
				'(("d" "default" plain "%?" :target
				   (file+head "notes/%<%Y%m%d%H%M>-${slug}.org" "#+title: ${title}
		,#+filetags: %^G
		")
				   :unnarrowed t
				   :kill-buffer)
				  ("r" "recurring" entry "* %u %?" :target
				   (file+head "notes/${slug}.org" "#+title: ${title} ")

				   :unnarrowed t)
				  ("p" "project" plain "%?" :target
				   (file+head "projects/${slug}.org" "#+title: ${title}
		,#+filetags: %^G
		")
				   :unnarrowed t)))
		  (setq org-roam-capture-ref-templates
				'(("r" "ref" plain "%?" :target
				   (file+head "notes/%<%Y%m%d%H%M>-${slug}.org" "#+title: ${title}
		,#+filetags: %^G
		")
				   :unnarrowed t)
				  ("t" "agenda item" entry "* %^{State?|TODO|WORKING|BACKLOGGED} %u ${title}
		%?" :target
		(file+head "agenda/%<%Y%m%d%H%M>-${slug}.org" "#+title: ${title}
		,#+filetags: %^G
		")


		:unnarrowed t
		:kill-buffer)))
		  :bind (("C-c n f" . org-roam-node-find)
				 ("C-c n c" . org-roam-capture)
				 (:map org-mode-map
					   ("C-c n i" . org-roam-node-insert)
					   ("C-c n r" . org-roam-ref-add)
					   ("C-c n t" . org-roam-tag-add)
					   ("C-c n b" . org-roam-buffer-toggle))))


		(use-package org-roam-ui
		  :ensure t
		  :after org-roam
		  :config
		  (setq org-roam-ui-sync-theme t
				org-roam-ui-follow t
				org-roam-ui-update-on-save t
				org-roam-ui-open-on-start t))
	  #+end_src

***** Local Config
	  #+begin_src emacs-lisp
		(defun my-load-org-config ()
		  "Load Emacs Lisp source code in (concat org-directory \"conf.org\")."
		  (interactive)
		  (let ((org-config-file (concat org-directory "conf.org"))
				(tangled-file (concat org-directory "conf.el")))
			(if (file-exists-p org-config-file)
				(org-babel-load-file org-config-file))))

		(my-load-org-config)
	  #+end_src

***** Misc
	  #+begin_src emacs-lisp
		(defun my-save-org-archive-file ()
		  "Save org-archive file."
		  (interactive)
		  (if (equal (file-name-extension buffer-file-name) "org")
			  (with-current-buffer (concat (buffer-name) "_archive")
				(save-buffer))
			nil))

		;; Finally, the newly-defined function can advise the archive function. So,
		;; after a subtree in org is archived, the archive file will be automatically saved.
		(advice-add 'org-archive-subtree :after #'my-save-org-archive-file)


		(defun my-org-table-to-dot (nodes edges &optional attr subgraph)
		  "Generate a graph in dot format given NODES and EDGES."
		  (concat
		   "digraph {\n"
		   (mapconcat 'identity attr "\n")
		   "\n"
		   (mapconcat
			(lambda (x)
			  (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"];"
					  (car x)
					  (nth 1 x)
					  (if (string= "" (nth 2 x)) "box" (nth 2 x))
					  (if (string= "" (nth 3 x)) "none" (nth 3 x))
					  )) nodes "\n")
		   "\n"
		   (mapconcat
			(lambda (x)
			  (format "%s -> %s [taillabel=\"%s\"];"
					  (car x) (nth 1 x) (nth 2 x))) edges "\n")
		   "}\n"
		   subgraph
		   "\n"))

	  #+end_src

**** Programming Languages
***** C/C++
****** google-c-style
	   #+BEGIN_SRC emacs-lisp
		 (use-package google-c-style
		   :pin melpa
		   :hook
		   ((c-mode c++-mode) . google-set-c-style)
		   (c-mode-common . google-make-newline-indent))
	   #+END_SRC
***** Python
	  Configuration specific to python.
***** Go
	  #+begin_src emacs-lisp
		(defun add-hook-gofmt-before-save ()
		  (add-hook 'before-save-hook 'gofmt-before-save nil t))
		(use-package go-mode
		  :mode ("\\.go\\'" . go-mode)
		  :hook (go-mode . add-hook-gofmt-before-save)
		  :config (add-to-list 'load-path (concat (getenv "GOPATH")  "/src/golang.org/x/lint/misc/emacs/")))
	  #+end_src
***** Lisp
	  #+BEGIN_SRC emacs-lisp
		(use-package clojure-mode
		  :hook
		  (clojure-mode . (lambda () (require 'display-fill-column-indicator) (display-fill-column-indicator--turn-on))))
		(use-package paredit
		  :disabled
		  :commands (enable-paredit-mode)
		  :init
		  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
		  (add-hook 'clojure-mode-hook #'enable-paredit-mode))

		(use-package lispy
		  :pin melpa
		  :init
		  (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
		  (add-hook 'lisp-mode-hook #'lispy-mode)
		  (add-hook 'clojure-mode-hook #'lispy-mode)
		  (add-hook 'scheme-mode-hook #'lispy-mode)
		  :config
		  (lispy-set-key-theme '(special c-digits paredit))
		  (define-key lispy-mode-map-paredit (kbd "M-o") nil)
		  (define-key lispy-mode-map-paredit (kbd "M-[") #'lispy-wrap-brackets)
		  (define-key lispy-mode-map-paredit (kbd "M-{") #'lispy-wrap-braces))


		(use-package lispyville
		  :pin melpa
		  :init
		  (add-hook 'lispy-mode-hook #'lispyville-mode)
		  :config
		  (lispyville-set-key-theme
		   '(operators
			 c-w
			 wrap
			 slurp/barf-lispy
			 additional
			 additional-motions)))
	  #+END_SRC
**** vterm
	 #+BEGIN_SRC emacs-lisp
	   (use-package vterm
		 :pin "melpa"
		 :config
		 (setq vterm-buffer-name-string "vterm [%s]")
		 (setq vterm-timer-delay 0.01)
		 (define-key global-map (kbd "C-c v") #'vterm)
		 (defun my-vterm-list-buffers ()
		   (seq-filter (lambda (buffer) (with-current-buffer buffer (equal major-mode 'vterm-mode))) (buffer-list)))
		 (defun my-vterm-kill-process (process event)
		   "A process sentinel. Kills PROCESS's buffer if it is live."
		   (let ((b (process-buffer process)))
			 (and (buffer-live-p b)
				  (kill-buffer b))))
		 (defun my-vterm-run (command &optional buffer)
		   "Execute string COMMAND in BUFFER creating a new buffer if it does not exist.

	   Interactively, prompt for COMMAND with the current buffer's file
	   name supplied. When called from Dired, supply the name of the
	   file at point.

	   Like `async-shell-command`, but run in a vterm for full terminal features.

	   When the command terminates, the shell remains open, but when the
	   shell exits, the buffer is killed."
		   (interactive
			(let* ((command (read-shell-command "command: "))
				   (vterm-buffers (mapcar #'buffer-name (my-vterm-list-buffers))))
			  (list command
					(completing-read "buffer: " (cons (concat "*" command "*") vterm-buffers)))))
		   (let* ((vterm-buffers (mapcar #'buffer-name (my-vterm-list-buffers)))
				  (new-vterm (null (member buffer vterm-buffers))))
			 (with-current-buffer (if new-vterm (vterm buffer) buffer)
			   (when new-vterm (set-process-sentinel vterm--process #'my-vterm-kill-process))
			   (vterm-send-string command)
			   (vterm-send-return)
			   (pop-to-buffer (current-buffer)))))
		 :hook (vterm-mode . (lambda () (goto-address-mode 1))))
	 #+END_SRC


**** evil-collection
	 #+begin_src emacs-lisp
	   (use-package evil-collection
		 :after evil
		 :diminish (evil-collection-unimpaired-mode . "")
		 :config
		 (setq evil-collection-mode-list (remove 'lispy evil-collection-mode-list))
		 (evil-collection-init))
	 #+end_src
* Local Config
  Load a local configuration file if it exists. This configuration file should also contain ~custom-set-variables~.
  #+begin_src emacs-lisp
	(defvar my-local-init-file (concat user-emacs-directory "init.local.el") "Local init.el file for per instance configuration.")
	(setq custom-file my-local-init-file)

	(if (file-exists-p my-local-init-file)
		(load my-local-init-file)
	  (write-region "" nil my-local-init-file t))
	 #+end_src
* Functions
  #+begin_src emacs-lisp
	(use-package my-functions
	  :disabled)
  #+end_src
* TODO Improvements
** TODO Need function for yank or paste into a single line
   For example given a multi line string, I want to copy and and paste it as a single line.
   

#+TITLE: Sherman Pay's Emacs Configuration
#+AUTHOR: Jing Hao Sherman Pay
#+EMAIL: shermanpay1991@gmail.com
#+PROPERTY: header-args :emacs-lisp    :tangle yes
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Overview
  Complete configuration for emacs. For machine specific configuration I defer to =~/.emacs.d/init.local.el= file.

* Configuration

** Require Common Lisp library
Require builtin libraries here.

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC

** Bootstrap
   Bootstrapping my Emacs.
   #+begin_src emacs-lisp
	 (defun my-file-decrypt->string (filename)
	   "Decrypt GPG encrypted file FILENAME and return the decrypted string."
	   (let ((decrypted-file (concat "/tmp/" (file-name-base filename))))
		 (if filename
			 (progn
			   (epa-decrypt-file filename decrypted-file)
			   (with-temp-buffer
				 (insert-file-contents-literally decrypted-file)
				 (delete-file decrypted-file)
				 (buffer-substring-no-properties (point-min) (point-max))))
		   (message "WARNING '%s' is not readable" filename))))
   #+end_src
** Startup
Right now I open a basic "todo.org" file at startup. Consider creating a
personalized org file for startup.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook #'org-todo-list)
  (setq inhibit-startup-message t)
#+END_SRC

** Basic stuff

*** Yes/No prompts
Change yes or no prompts to y or n prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC


** Midnight Mode
   Midnight mode runs ~clean-buffer-list~ at a defined /midnight/ everyday. To disable the timer, eval ~(cancel-timer midnight-timer)~.
#+begin_src emacs-lisp
  (require 'midnight)
  (midnight-mode 1)
  (midnight-delay-set 'midnight-delay "01:42am")
  (setq clean-buffer-list-delay-general 1)
#+end_src
*** Additional Configuration options
	:PROPERTIES:
	:header-args: :tangle no
	:END:
	To change the expiration date of all buffers, like to 1 day, set ~clean-buffer-list-delay-general~.

	#+begin_src emacs-lisp
	  (setq clean-buffer-list-delay-general 1)
	#+end_src
	To change the expiration date of special buffers, to 6 hours, set ~clean-buffer-list-delay-special~.

	#+begin_src emacs-lisp
	  (setq clean-buffer-list-delay-special (* 6 3600))
	#+end_src
	To add more buffers to the list of special buffers, add them to the list ~clean-buffer-list-kill-buffer-names~.

	#+begin_src emacs-lisp
	  (setq clean-buffer-list-kill-buffer-names (nconc clean-buffer-list-kill-buffer-names
													   '("*buffer-selection*"
														 "*Finder*"
														 "*Finder Category*"
														 "*Finder-package*"
														 "*RE-Builder*"
														 "*vc-change-log*")))
	#+end_src
	To define more regular expressions that should match special buffers, add them to ~clean-buffer-list-kill-regexps~.

	#+begin_src emacs-lisp
	  (setq clean-buffer-list-kill-regexps (nconc clean-buffer-list-kill-regexps
												  '("\\`\\*Customize .*\\*\\'"
													"\\`\\*\\(Wo\\)?Man .*\\*\\'")))
	#+end_src
	To define buffers that should never be killed, add strings to the list ~clean-buffer-list-kill-never-buffer-names~.

	#+begin_src emacs-lisp
	  (setq clean-buffer-list-kill-never-buffer-names (nconc clean-buffer-list-kill-never-buffer-names
															 '("*eshell*"
															   "*ielm*"
															   "*mail*"
															   "*w3m*"
															   "*w3m-cache*")))
	#+end_src

	To define regular expressions for buffers that should never be killed, add them to the list ~clean-buffer-list-kill-never-regexps~.

	#+begin_src emacs-lisp
	  (setq clean-buffer-list-kill-never-regexps (nconc clean-buffer-list-kill-never-regexps
														'("\\`\\*tramp/.*\\*\\`"
														  "\\`\\*ftp .*\\*\\`")))
	#+end_src
*** Ivy/Counsel
Much more lightweight and faster then Helm, but with the same core functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
	:ensure t
	:diminish (ivy-mode "")
	:bind
	("C-c s" . 'swiper-isearch)
	("C-c o" . 'counsel-outline)
	:config
	(ivy-mode 1)
	(counsel-mode 1)
	(setq projectile-completion-system 'ivy)
	(defun my/find-file-no-ivy ()
	  (interactive)
	  (let ((ivy-state ivy-mode))
		(ivy-mode -1)
		(call-interactively 'find-file)
		(ivy-mode ivy-state))))

#+END_SRC

*** Smex
	#+begin_src emacs-lisp
	  (use-package smex)
	#+end_src
** Optional Packages
   The packages here are not /required/, but they each have their use case or
   provide a whole new experience.
*** Projectile
Package for working with "projects"
#+BEGIN_SRC emacs-lisp
  (use-package projectile
	:ensure nil
	:diminish (projectile-mode . "")
	:config (projectile-global-mode 1)
	:bind-keymap
	("C-c p" . projectile-command-map))
#+END_SRC

*** Company mode
	[[https://company-mode.github.io/][company-mode]] is an autocomplete framework for Emacs. And it can work with
	various backends.
	#+BEGIN_SRC emacs-lisp
	  (use-package company
		:ensure nil
		:diminish (company-mode . "")
		:config
		(global-company-mode)
		(setq company-tooltip-limit 20)                       ; bigger popup window
		(setq company-idle-delay .3)                          ; decrease delay before autocompletion popup shows
		(setq company-echo-delay 0)                           ; remove annoying blinking
		;; start autocompletion only after typing
		(setq company-begin-commands '(self-insert-command)))
	#+END_SRC
*** Bazel/Blaze
#+BEGIN_SRC emacs-lisp
  (use-package bazel
	:disabled
	:ensure nil
	:pin melpa
	:mode "BUILD")
#+END_SRC
*** imenu list
	#+BEGIN_SRC emacs-lisp
	  (use-package imenu-list
		:ensure nil
		:bind  ("C-c l"  . #'imenu-list-smart-toggle))
	#+END_SRC

*** LSP
	Disabling eglot as at work, there is a builtin version, which is probably more compatible.
	#+begin_src emacs-lisp
	  (use-package eglot
		:ensure nil)

	#+end_src
*** Highlight indentation levels
   #+begin_src emacs-lisp
	 (use-package highlight-indent-guides
	   :ensure nil
	   :if (package-installed-p 'highlight-indent-guides)
	   :config
	   (setq highlight-indent-guides-method 'character)
	   :hook
	   (prog-mode . highlight-indent-guides-mode))
   #+end_src
*** Lexer and parser generators
	#+begin_src emacs-lisp
	#+end_src
	
** Experimental Packages
   The packages here are /experimental/, and should be reviewed if unused.
*** Reddit
   #+begin_src emacs-lisp
	 (use-package md4rd
	   :defer
	   :config
	   (setq md4rd--oauth-access-token (my-file-decrypt->string (concat user-emacs-directory "md4rd-oauth-access-token.gpg"))
			 md4rd--oauth-refresh-token (my-file-decrypt->string (concat user-emacs-directory "md4rd-oauth-refresh-token.gpg"))))
   #+end_src
*** Burly (Frame+Window Layout Management)
	Goals
	1. Create a dedicated frame for global dashboard (See agenda, world-clock, proced) etc.
	2. Same frame or different frame for workspace specific dashboard such as terminal/compilation/Version Control buffers.
	#+begin_src emacs-lisp
	  (use-package burly)
	#+end_src
*** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
	:disabled
	:config
	(dashboard-setup-startup-hook))
#+end_src

** Org Mode
The following are builtin configurations. The keybindings are as recommended by [[info:org#Activation][info:org#Activation]].
#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
  (setq org-adapt-indentation t)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC
*** Variables
	#+begin_src emacs-lisp
	  (require 'org)
	  (setq org-directory (concat (my-gdrive-or-emacs-dir) "org/"))
	  (defconst my/org-agenda-directory (concat org-directory "agenda/"))
	  (defconst my/org-notes-directory (concat org-directory "notes/"))
	  (defconst my/org-projects-directory (concat org-directory "projects/"))
	  (defconst my/org-recurring-directory (concat org-directory "recurring/"))
	  (setq org-agenda-files (list my/org-agenda-directory my/org-projects-directory my/org-recurring-directory))
	  (setq org-default-notes-file (concat org-directory "notes.org"))
	  (defconst my/org-todo-file (concat my/org-agenda-directory "todo.org"))
	  (setq org-todo-keywords '((sequence "TODO(t)" "WORKING(w)" "BLOCKED(b)" "IN_REVIEW(r)" "VERIFY(v)"
										  "|" "DONE(d)" "OBSOLETE(o)" "BACKLOGGED(B)" )))
	  (setq org-enforce-todo-dependencies t)
	  (setq org-refile-targets
			'((nil :maxlevel . 3)
			  (org-agenda-files :maxlevel . 3)))
	  (setq org-id-method 'ts)			   ; use timestamp
	  ;; Create an ID if needed to make a link.
	  (setq org-id-link-to-org-use-id t)
	  (setq org-list-allow-alphabetical t)
	  (org-element-update-syntax)				; this is needed for the above
	#+end_src
*** Minor Modes
	Configure minor modes to enable/disable for org-mode
	#+begin_src emacs-lisp
	  (defun my-org-mode-config-minor-modes ()
		;; disable
		(with-eval-after-load 'flycheck (flycheck-mode -1))
		;; enable
		(visual-line-mode))
	  (add-hook 'org-mode-hook #'my-org-mode-config-minor-modes)
	#+end_src
*** Plugins/Modules
The following are org-mode plugins.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "org"
	(nconc org-modules
		   '(
			 org-tempo
			 org-capture
			 org-protocol
			 ;; org-habit
			 ;; org-id
			 ;; org-brain
			 ))
	(org-load-modules-maybe t))
  (use-package org-bullets
	:if (package-installed-p 'org-bullets)
	:ensure nil
	:hook (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org-babel
	#+begin_src emacs-lisp
	  (org-babel-do-load-languages
	   'org-babel-load-languages
	   '((emacs-lisp t)
		 (dot . t)))
	#+end_src
*** Clocking
	#+begin_src emacs-lisp
	  (setq org-clock-persist 'history)
	  (org-clock-persistence-insinuate)
	#+end_src
*** Notifications
	#+begin_src emacs-lisp
	  (appt-activate)				; Builtin appt package for notifications
	  (setq appt-message-warning-time 6)
	  (setq appt-display-duration 30)

	  ;; The following runs periodically in the foreground
	  (use-package org-notifications
		:disabled
		:ensure nil
		:pin melpa
		:config
		(org-notifications-start))
	#+end_src

*** Capture
	#+BEGIN_SRC emacs-lisp
	  (with-eval-after-load "org-capture"
		  (setq org-capture-templates
				(nconc '(("p" "Protocol" entry (file+headline org-default-notes-file "Inbox")
						  "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
						 ("L" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
						  "* %? [[%:link][%:description]] \nCaptured On: %U")
						 ("t" "Backlog (default)" entry (file+headline my/org-todo-file "Backlog") "* TODO %U %a\n%i\n%?")
						 ("T" "Backlog" entry (file+headline my/org-todo-file "Backlog") "* TODO %U %^{title|chat AI|mail AI}\n%i\n%?")
						 ("b" "bug" entry (file+headline my/org-todo-file "Backlog")
						  "* TODO %(org-buganizer-create-todo-string-from-bug)"
						  :clock-in t :clock-resume t))
					   org-capture-templates)))
	#+END_SRC
*** org-protocol
	#+begin_src javascript
	  javascript:location.href='org-protocol://capture?template=t&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
	  javascript:location.href='org-protocol://capture?template=T&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
	#+end_src

*** org-roam
	  #+begin_src emacs-lisp
		(use-package org-roam
		  :ensure nil
		  :after org
		  :custom
		  (org-roam-directory org-directory)
		  (org-roam-completion-everywhere t)
		  :config
		  (require 'org-roam-capture)
		  (require 'org-roam-protocol)
		  (org-roam-db-autosync-mode)
		  (setq org-roam-capture-templates
				`(("d" "default" plain "%?" :target
				   (file+head ,(concat my/org-notes-directory "%<%Y%m%d>-${slug}.org") "#+title: ${title}
		,#+filetags: %^G
		")
				   :unnarrowed t
				   :kill-buffer)
				  ("r" "recurring" entry "* %u %?" :target
				   (file+head ,(concat my/org-recurring-directory "${slug}.org") "#+title: ${title} ")

				   :unnarrowed t)
				  ("p" "project" plain "%?" :target
				   (file+head ,(concat my/org-projects-directory "${slug}.org") "#+title: ${title}
		,#+filetags: %^G
		")
				   :unnarrowed t)))
		  (setq org-roam-capture-ref-templates
				`(("r" "ref" plain "%?" :target
				   (file+head ,(concat my/org-notes-directory "%<%Y%m%d>-${slug}.org") "#+title: ${title}
		,#+filetags: %^G
		")
				   :unnarrowed t)
				  ("t" "agenda item" entry "* %^{State?|TODO|WORKING|BACKLOGGED} %u ${title}
		%?"
				   :target (file+head ,(concat my/org-agenda-directory "%<%Y%m%d>-${slug}.org") "#+title: ${title}
		,#+filetags: %^G
		,#+category: %^{Category?|todo|buganizer}
		")
				   :unnarrowed t
				   :kill-buffer)))
		  :bind (("C-c n f" . org-roam-node-find)
				 ("C-c n c" . org-roam-capture)
				 (:map org-mode-map
					   ("C-c n i" . org-roam-node-insert)
					   ("C-c n r" . org-roam-ref-add)
					   ("C-c n t" . org-roam-tag-add)
					   ("C-c n b" . org-roam-buffer-toggle))))


		(use-package org-roam-ui
		  :ensure t
		  :after org-roam
		  :config
		  (setq org-roam-ui-sync-theme t
				org-roam-ui-follow t
				org-roam-ui-update-on-save t
				org-roam-ui-open-on-start t))
	  #+end_src
**** notdeft
	 [[https://github.com/hasu/notdeft][notdeft]] is a fast text search engine for my notes, but it requires manual installation.

	 #+begin_src emacs-lisp
	   (setq my-notdeft-package-path (expand-file-name "~/Projects/OpenSource/notdeft"))
	   (add-to-list 'load-path my-notdeft-package-path)
	   (add-to-list 'load-path (concat my-notdeft-package-path "/extras"))
	   (use-package notdeft-autoloads
		 :after
		 org-roam
		 :ensure nil
		 :config
		 (setq notdeft-directories (list (expand-file-name (concat org-roam-directory))))
		 (setq notdeft-xapian-program (expand-file-name (concat my-notdeft-package-path "/xapian/notdeft-xapian"))))
	 #+end_src

*** Local Config
	  #+begin_src emacs-lisp
		(defun my-load-org-config ()
		  "Load Emacs Lisp source code in (concat org-directory \"conf.org\")."
		  (interactive)
		  (let ((org-config-file (concat org-directory "conf.org"))
				(tangled-file (concat org-directory "conf.el")))
			(if (file-exists-p org-config-file)
				(org-babel-load-file org-config-file))))

		(my-load-org-config)
	  #+end_src

*** Misc
	  #+begin_src emacs-lisp
		(defun my-save-org-archive-file ()
		  "Save org-archive file."
		  (interactive)
		  (if (equal (file-name-extension buffer-file-name) "org")
			  (with-current-buffer (concat (buffer-name) "_archive")
				(save-buffer))
			nil))

		;; Finally, the newly-defined function can advise the archive function. So,
		;; after a subtree in org is archived, the archive file will be automatically saved.
		(advice-add 'org-archive-subtree :after #'my-save-org-archive-file)


		(defun my-org-table-to-dot (nodes edges &optional attr subgraph)
		  "Generate a graph in dot format given NODES and EDGES."
		  (concat
		   "digraph {\n"
		   (mapconcat 'identity attr "\n")
		   "\n"
		   (mapconcat
			(lambda (x)
			  (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"];"
					  (car x)
					  (nth 1 x)
					  (if (string= "" (nth 2 x)) "box" (nth 2 x))
					  (if (string= "" (nth 3 x)) "none" (nth 3 x))
					  )) nodes "\n")
		   "\n"
		   (mapconcat
			(lambda (x)
			  (format "%s -> %s [taillabel=\"%s\"];"
					  (car x) (nth 1 x) (nth 2 x))) edges "\n")
		   "}\n"
		   subgraph
		   "\n"))

	  #+end_src
** Modern UI
   Having a UI that looks good, makes me more productive.

*** Themes
	[[https://github.com/kuanyui/moe-theme.el][moe-theme]]: Many awesome customizable features. [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/dark01.png][dark]], [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/light01.png][light]]
	#+BEGIN_SRC emacs-lisp
	  ;; (use-package moe-theme
	  ;;   :pin melpa
	  ;;   :config (moe-light))

	  ;; (use-package spacemacs-theme
	  ;;   :pin melpa)
	#+END_SRC

*** Fonts
	Fonts are handled by the local config as it's easier to manually set them up.

* Local Config
  Load a local configuration file if it exists. This configuration file should also contain ~custom-set-variables~.
  #+begin_src emacs-lisp
	(defvar my-local-init-file (concat user-emacs-directory "init.local.el") "Local init.el file for per instance configuration.")
	(setq custom-file my-local-init-file)

	(if (file-exists-p my-local-init-file)
		(load my-local-init-file)
	  (write-region "" nil my-local-init-file t))
	 #+end_src
* Functions
  #+begin_src emacs-lisp
	(use-package my-functions
	  :disabled)
  #+end_src
* TODO Improvements
** TODO Need function for yank or paste into a single line
   For example given a multi line string, I want to copy and and paste it as a single line.
** TODO [2022-03-30 Wed 10:42] [[id:3b596fb3-89a7-4d81-ad56-420043cf1614][[2022-02-17 Thu 12:13] Try out org-noter]]
   The following talk showed an effective way of taking notes side-by-side a presentation or paper, using =org-noter=.
   [[id:2c2547a9-ec22-4b8e-bbc1-e80e1cf4e4e2][EmacsConf - 2021 - talks - One effective CS grad student workflow]]
   This might be useful for when listening to presentations/tech talks or reading paper.s
** TODO [2022-08-11 Thu] automate font scaling based on monitor configuration.

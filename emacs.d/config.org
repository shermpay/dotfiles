#+TITLE: Sherman Pay's Emacs Configuration
#+AUTHOR: Jing Hao Sherman Pay
#+EMAIL: shermanpay1991@gmail.com
#+PROPERTY: header-args :emacs-lisp    :tangle yes
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Overview
I am currently in the process of cleaning up my Emacs config. I started using
Emacs before [[https://github.com/jwiegley/use-package][use-package]] was really a thing, so I had many packages installed
and had dependencies to the packages all over the place. This made bootstrapping
a new machine with Emacs really difficult. As such the goal of my current config
is to be as simple as possible and have the flexilibility to enable packages and
configurations for specific use cases.

* Configuration

** Require Common Lisp library
Require builtin libraries here.

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC

** Environment

*** My variables
My user defined variables. I prefix all my variables with "my" to ensure there
are no name collisions with other other modes variables.
#+BEGIN_SRC emacs-lisp
  (defvar my-gdrive-dir (getenv "MY_DRIVE"))
  (defun my-gdrive-or-emacs-dir ()
	(if my-gdrive-dir
		my-gdrive-dir
	  user-emacs-directory))
#+END_SRC 

*** Load Paths
Add subdirectories of "~/.emacs.d" to load-path
#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
	(normal-top-level-add-subdirs-to-load-path))
#+END_SRC

*** User Info
Explicitly set these.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jing Hao Sherman Pay"
      user-mail-address "shermanpay1991@gmail.com")
#+END_SRC

** Startup
Right now I open a basic "todo.org" file at startup. Consider creating a
personalized org file for startup.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
			(lambda () (find-file (concat (my-gdrive-or-emacs-dir) "/org/todo.org"))))
  (setq inhibit-startup-message t)
#+END_SRC

** Basic stuff

*** Yes/No prompts
Change yes or no prompts to y or n prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Uniquify
Uniquify buffer names with "post-forward" style:
   /foo/bar/name will become name|/foo/bar
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "M-o") 'other-window)
#+END_SRC
** Editing text
subword-mode: Allows navigation and editing of "subwords"

show-paren-mode: Show matching parentheses

next-line-add-newlines: If non-nil 'next-line' inserts a newline

save-place-mode: Save previous editing location and always go back to it
#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)

  (show-paren-mode 1)
  (setq show-paren-style 'expression)

  (setq next-line-add-newlines nil)

  (save-place-mode 1)

  (setq-default tab-width 4)
#+END_SRC

*** Ansi Color codes
Enable Ansi color codes for compilation buffers
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
#+END_SRC

*** Debugging Emacs
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

*** Backups
Setting Auto-Save directory and Backup Directory
#+BEGIN_SRC emacs-lisp
(let ((tmp (concat user-emacs-directory "tmp")))
 (setq backup-directory-alist
       `((".*" . ,tmp)))
 (setq auto-save-file-name-transforms
       `((".*" ,tmp t))))
#+END_SRC

** User Interface

*** Line and Column numbers
Show line-numbers and column numbers in the mode-line but don't show
line numbers on the sidej
#+BEGIN_SRC emacs-lisp
  (global-linum-mode -1)
  (column-number-mode t)
#+END_SRC
*** Bars
Don't like all the fancy bars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1) 			
(menu-bar-no-scroll-bar)
(tool-bar-mode -1)
#+END_SRC

*** Echo Area
Uses echo area to display tooltips and echo keystrokes
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq echo-keystrokes 0.01)
#+END_SRC

** Code Navigation
*** Imenu
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c i") 'imenu)

#+END_SRC
** Buffer Mangement
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Emacs Server

Start emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

** Emacs Desktops
   For saving "desktops"(sessions)
   #+begin_src emacs-lisp
	 (desktop-save-mode 1)
	 (add-to-list 'desktop-path "~/.emacs.d/desktops")
   #+end_src
** Flyspell

Enable flyspell mode for strings and comments
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))
#+END_SRC

** Browser settings

Use chrome as the default browser. This assumes chrome is installed.
#+BEGIN_SRC emacs-lisp
(setq browse-url-generic-program "/usr/bin/google-chrome"
      browse-url-browser-function 'browse-url-generic)
#+END_SRC
** Package Management
Package management is important!
Add melpa-stable repository, which has stable community packages.
Add melpa repository for specific packages.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	'("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
	'("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

#+END_SRC

*** use-package
Bootstrap and customize it.  always-ensure: Ensure the package exists
by downloading it if it does not exist. However this does *not* keep
packages up to date.
#+BEGIN_SRC emacs-lisp
  (if (member emacs-version '("26.1" "26.2")) (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
  (eval-when-compile (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (setq use-package-always-pin "melpa")
  (setq use-package-verbose nil)			; set to t for debugging init
#+END_SRC

*** auto-package-update
Automatically update packages.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :disabled
    :config
	(setq auto-package-update-interval 90)
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
	(setq auto-package-update-prompt-before-update t)
    (auto-package-update-maybe))
#+END_SRC
** Packages
   Core packages that is needed for 99% of use cases.
*** evil-mode
I use evil-mode for Vim emulation

evil-move-cursor-back: don't want to move cursor back after exiting insert 
Add more distinguishable colors for evil states
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config (evil-mode 1)
    (setq evil-move-cursor-back nil)
    (setq evil-normal-state-cursor '("dim gray" box)
	  evil-insert-state-cursor '("dim gray" bar)
	  evil-emacs-state-cursor '("green" bar)))
#+END_SRC
*** exec-path-from-shell
To ensure that the Linux/OSX environment variables within emacs is the same as
the shell. (Windows is not included)
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC
*** Ivy/Counsel
Much more lightweight and faster then Helm, but with the same core functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish (ivy-mode "")
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq projectile-completion-system 'ivy))

#+END_SRC

*** Projectile
Package for working with "projects"
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish (projectile-mode . "")
    :config (projectile-global-mode 1)
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+END_SRC

*** Undo tree mode
This makes undo/redo in emacs behave like a tree!
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish (undo-tree-mode . "")
    :config (global-undo-tree-mode 1))
#+END_SRC

*** Magit mode
[[https://magit.vc/][magit]] is an emacs interface to git
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:pin melpa)
#+END_SRC

** Optional Packages
   The packages here are not /required/, but they each have their use case or
   provide a whole new experience.
*** Company mode
[[https://company-mode.github.io/][company-mode]] is an autocomplete framework for Emacs. And it can work with
various backends.
#+BEGIN_SRC emacs-lisp
  (use-package company
	:diminish (company-mode . "")
	:config
	(global-company-mode)
	(setq company-tooltip-limit 20)                       ; bigger popup window
	(setq company-idle-delay .3)                          ; decrease delay before autocompletion popup shows
	(setq company-echo-delay 0)                           ; remove annoying blinking
	;; start autocompletion only after typing
	(setq company-begin-commands '(self-insert-command)))
#+END_SRC
*** Protocol Buffers
Protocol Buffers are awesome.
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :mode "\\.proto")
#+END_SRC
*** Bazel/Blaze
#+BEGIN_SRC emacs-lisp
  (use-package bazel-mode
    :mode "BUILD")
#+END_SRC
*** imenu list
	#+BEGIN_SRC emacs-lisp
	  (use-package imenu-list
		:bind  ("C-c l"  . #'imenu-list-smart-toggle))
	#+END_SRC

*** LSP
	Using eglot-mode for now, as it's supported at work. Also disable eglot-imenu, as it does not work.
	#+begin_src emacs-lisp
	  (use-package eglot
		:pin melpa-stable
		:config (add-to-list 'eglot-stay-out-of 'imenu))

	#+end_src
** Fancier UI
Having a UI that looks good, makes me more productive.

*** Themes
[[https://github.com/kuanyui/moe-theme.el][moe-theme]]: Many awesome customizable features. [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/dark01.png][dark]], [[https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/light01.png][light]]
#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
	:config (moe-dark))
#+END_SRC

** Org Mode
The following are builtin configurations. The keybindings are as recommended by [[info:org#Activation][info:org#Activation]].
#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC
*** Variables
	#+begin_src emacs-lisp
	  (setq org-directory (concat (my-gdrive-or-emacs-dir) "/org/"))
	  (setq org-default-notes-file (concat org-directory "notes.org"))
	  (defconst my-org-todo-file (concat org-directory "todo.org"))
	#+end_src
*** Minor Modes
	Configure minor modes to enable/disable for org-mode
	#+begin_src emacs-lisp
	  (defun my-org-mode-config-minor-modes ()
		;; disable
		(flycheck-mode -1)
		;; enable
		(visual-line-mode))
	  (add-hook 'org-mode-hook #'my-org-mode-config-minor-modes)
	#+end_src
*** Plugins/Modules
The following are org-mode plugins.
#+BEGIN_SRC emacs-lisp
  (nconc org-modules
		  '(
			org-tempo
			org-capture
			protocol
			;; org-habit
			;; org-id
			;; org-brain
			))
  (eval-after-load 'org
	  '(org-load-modules-maybe t))
  (use-package org-bullets
	:hook (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
*** org-babel
	#+begin_src emacs-lisp
	  (org-babel-do-load-languages
	   'org-babel-load-languages
	   '((emacs-lisp t)
		 (dot . t)))
	#+end_src
*** Capture
	#+BEGIN_SRC emacs-lisp
	  (setq org-capture-templates '(
		  ("p" "Protocol" entry (file+headline org-default-notes-file "Inbox")
			  "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
		  ("L" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
			  "* %? [[%:link][%:description]] \nCaptured On: %U")
		  ("t" "Action Item" entry (file+headline my-org-todo-file "Backlog") "* TODO %U %a\n%i\n%?")
		  ("T" "Action Item" entry (file+headline my-org-todo-file "Backlog") "* TODO %U %^{title|chat AI|mail AI}\n%i\n%?")
		  ("b" "bug" entry (file "~/bugs.org")
		   "* TODO %(org-buganizer-create-todo-string-from-bug)"
		   :clock-in t :clock-resume t)))
	#+END_SRC
*** org-protocol
	#+begin_src javascript
	  javascript:location.href='org-protocol://capture://t/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())
	  javascript:location.href='org-protocol://capture://T/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())
	#+end_src
*** Misc
	#+begin_src emacs-lisp
	  (defun my-save-org-archive-file ()
		"Save org-archive file."
		(interactive)
		(if (equal (file-name-extension buffer-file-name) "org")
			(with-current-buffer (concat (buffer-name) "_archive")
			  (save-buffer))
		  nil))

	  ;; Finally, the newly-defined function can advise the archive function. So,
	  ;; after a subtree in org is archived, the archive file will be automatically saved.
	  (advice-add 'org-archive-subtree :after #'my-save-org-archive-file)


	  (defun my-org-table-to-dot (nodes edges &optional attr subgraph)
		"Generate a graph in dot format given NODES and EDGES."
		(concat
		 "digraph {\n"
		 (mapconcat 'identity attr "\n")
		 "\n"
		 (mapconcat
		  (lambda (x)
			(format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"];"
					(car x)
					(nth 1 x)
					(if (string= "" (nth 2 x)) "box" (nth 2 x))
					(if (string= "" (nth 3 x)) "none" (nth 3 x))
					)) nodes "\n")
		 "\n"
		 (mapconcat
		  (lambda (x)
			(format "%s -> %s [taillabel=\"%s\"];"
					(car x) (nth 1 x) (nth 2 x))) edges "\n")
		 "}\n"
		 subgraph
		 "\n"))

	#+end_src

** Local Config
   Load a local configuration file if it exists. This configuration file should also contain ~custom-set-variables~.
   #+begin_src emacs-lisp
	 (defvar my-local-init-file (concat user-emacs-directory "init.local.el") "Local init.el file for per instance configuration.")
	 (setq custom-file my-local-init-file)

	 (if (file-exists-p my-local-init-file)
		 (load my-local-init-file)
	   (write-region "" nil my-local-init-file t))
   #+end_src
** Programming Languages
*** C/C++
**** google-c-style
	 #+BEGIN_SRC emacs-lisp
	   (use-package google-c-style
		 :pin melpa
		 :hook
		 ((c-mode c++-mode) . google-set-c-style)
		 (c-mode-common . google-make-newline-indent))
	 #+END_SRC
*** Python
	Configuration specific to python.
*** Go
	#+begin_src emacs-lisp
	  (defun add-hook-gofmt-before-save ()
		(add-hook 'before-save-hook 'gofmt-before-save nil t))
	  (use-package go-mode
		:mode ("\\.go\\'" . go-mode)
		:hook (go-mode . add-hook-gofmt-before-save))
	#+end_src
*** Lisp
	#+BEGIN_SRC emacs-lisp
	  (use-package paredit
		:commands (enable-paredit-mode)
		:init
		(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))
	#+END_SRC
** vterm
   #+BEGIN_SRC emacs-lisp
	 (use-package vterm
	   :pin "melpa"
	   :config (setq vterm-buffer-name-string "vterm [%s]")
	   :hook (vterm-mode . (lambda () (goto-address-mode 1))))
   #+END_SRC
